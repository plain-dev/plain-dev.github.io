{"pages":[{"title":"","text":".github_stats { width: auto; display: flex; flex-direction: row; background: url(../img/bg_point.png) no-repeat center center; background-size: cover; position: relative; overflow: hidden; border-radius:10px; } .github_stats:after { position:absolute; content:''; width:100%; height:100%; top:0; left:0; border-radius:10px; box-shadow:0 0 30px 10px #222 inset; pointer-events: none; /* Pseudo element penetration click event */ } @media screen and (max-width: 768px) { .illustration { display: none !important; } .github_stats { flex-direction: column; } } .avatar { position: relative; width: 150px; height: 150px; margin: 66px auto; border-color: rgba(48, 52, 54, 0.4); border: 4px solid hsl(0deg 1% 33% / 40%); border-radius: 100px; } .avatar-icon { display: block; position: absolute; right: 0; top: 100px; width: 30px; height: 30px; z-index: 9; } @keyframes item-illustration-in { 0% { background-position: 0 0 } to { background-position: 0 -7992px } } .item-illustration { animation: item-illustration-in 1.5s steps(37) infinite } .item-illustration { display: inline-block; width: 215px; height: 216px; background-size: 100% auto; background-image: url(../img/illustration-sprite.png); } .illustration-wrapper { margin-right: -20px; float: right; display: flex; flex-direction: column; } Hi there, I'm Plain 👋 👨‍💻 Developer & 🎮 Gamer A developer who is passionate about Kotlin technologies and open source 📊 GITHUB STATS 🎭 FIND ME VIA &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 👑 THANKS © Tencent Cloud本站的「建立」与「运转」，离不开「开源社区」和「第三方服务」的支持 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; * 包括但不仅限于以上所列 👆 🎉 HAVE FUN","link":"/readme/index.html"},{"title":"","text":"/** * 改变头像徽章（愚人节） */ function changeAvatarBadgeWithAFD() { var nowDate = new Date() if (nowDate.getMonth() + 1 == 4 && nowDate.getDate() == 1) { var badgeEl = document.getElementById('avatar_badge') badgeEl.src = '../img/icon_badge_small.svg' badgeEl.title = \"年度小会员\" } } window.onload = function () { changeAvatarBadgeWithAFD() }","link":"/readme/init.js"}],"posts":[{"title":"Github 引用 Issues、Pull requests 和提交记录","text":"在 GitHub 中，对 Issues、Pull requests 和提交记录的引用将自动转换为短链接 规则 引用类型 源引用 短链接 Issues 或 Pull requests URL https://github.com/JetBrains/kotlin/pull/4645 #4645 # 和 Issues 或 Pull requests 编号 #4645 #4645 GH- 和 Issues 或 Pull requests 编号 GH-4645 #4645 Username/Repository# 和 Issues 或 Pull requests 编号 JakeWharton/timber#315 #315 Organization_name/Repository# 和 Issues 或 Pull requests 编号 JetBrains/kotlin#4645 #4645 提交 URL https://github.com/JakeWharton/timber/commit/5f4bcd9922cbf94cf7486852ccfc8fd64d506988 5f4bcd9 SHA 5f4bcd9922cbf94cf7486852ccfc8fd64d506988 5f4bcd9 User@SHA JakeWharton@5f4bcd9922cbf94cf7486852ccfc8fd64d506988 JakeWharton@5f4bcd9 Username/Repository@SHA JakeWharton/timber@5f4bcd9922cbf94cf7486852ccfc8fd64d506988 JakeWharton/timber@5f4bcd9 参考 自动链接的引用和 URL - GitHub Docs 配置自动链接以引用外部资源 - GitHub Docs","link":"/dev/github-autolinked-references-and-urls/"},{"title":"TortoiseSVN 设置对比工具为 IDEA","text":"关键参数12345// 🦗 Diff tools{idea-path} diff %mine %base// 🐝 Merge tools{idea-path} merge %mine %theirs %base %merged 以上命令参考自 Compare files from the command line - IntelliJ IDEA Merge files from the command line - IntelliJ IDEA TortoiseSVN 提供了以下值供外部使用 Diff tools %base 没更改的原始文件 %mine 你更改过的新文件 &gt; 查看更多 Merge tools %base 没有被你或他人更改的原始文件 %mine 你更改过的新文件 %theirs 档案库中存放的文件 %merged 发生冲突的文件，同时将被合并后的文件替换 &gt; 查看更多 设置方法通过以下路径设置 Diff tools1TortoiseSVN -&gt; Settings -&gt; Diff Viewer -&gt; External Merge tools1TortoiseSVN -&gt; Settings -&gt; Diff Viewer -&gt; Merge Tool -&gt; External 参考 Could I configure IntelliJ diff viewer/merge tool as external tools in tortoiseSVN? - Stack Overflow","link":"/dev/tsvn-external-comparison-tool-settings/"},{"title":"Windows Node.js 安装及配置","text":"💡 本文介绍了在 Windows 通过 NVM 「安装」、「管理」 Node.js 版本，通过 NRM 管理 NPM 镜像源 🌏 📄 名词解释 NPM : Node Package Manager「Node 包管理器」 NVM : Node Version Manager「Node 版本管理器」 NRM : Node Registry Manager「Node 镜像源管理器」 🔨 NVM安装1scoop install nvm 或 nvm-windows/releases 操作列出 node 版本 1234# 本机安装版本nvm list# 所有可用版本nvm list available 安装指定版本 node 1nvm install 0.12.0 使用指定版本 node 1nvm use 0.12.0 查看当前 node 版本 1node -v 🌏 NRM安装1npm install -g nrm 操作列出所有可切换的镜像地址 1nrm ls 使用镜像地址 1nrm use cnpm","link":"/dev/windows-nodejs-install/"},{"title":"2021 MacBook Pro 14 &amp; 16 价格和配置对比","text":"2021年10月19日，新款 MacBook Pro 发布，下面列举了几种配置组合和零部件升级价格 整体价格14 尺寸 SOC 内存 固态 电源 正常价格 教育优惠价格 14 M1 Pro 8/14 16G 512G 67W ￥14999 ￥13899 14 M1 Pro 10/14 16G 512G 67W ￥16499 ￥15249 14 M1 Pro 10/16 16G 1T 96W ￥18999 ￥17499 14 M1 Max 10/24 32G 1T 96W ￥23499 ￥21549 14 M1 Max 10/32 32G 1T 96W ￥24999 ￥22899 16 尺寸 SOC 内存 固态 电源 正常价格 教育优惠价格 16 M1 Pro 10/16 16G 512G 96W ￥18999 ￥17499 16 M1 Max 10/24 32G 1T 96W ￥24999 ￥23049 16 M1 Max 10/32 32G 1T 96W ￥26499 ￥24199 仅列出部分组合 零部件升级价格 名称 正常价格 教育优惠价格 + M1 Pro 10/14 ￥1500 ￥1350 + M1 Pro 10/16 ￥2500 ￥2250 + M1 Max 10/24 ￥4000 ￥3600 + M1 Max 10/32 ￥5500 ￥4950 + 32G 内存 ￥3000 ￥2700 + 64G 内存 (仅限 M1 Max) ￥6000 ￥5400 + 1T 固态 ￥1500 ￥1350 + 2T 固态 ￥4500 ￥4050 + 4T 固态 ￥9000 ￥8100 + 8T 固态 ￥18000 ￥16200 数据来至 Apple 官网，上述价格可能出现变动","link":"/dl/2021-macbook-pro-comparison/"},{"title":"Apple Silicon Mac 获取显示器 Product ID 和 Vendor ID","text":"在 Apple Silicon Mac 上对显示器配置进行修改时，往往需要用到 Product ID 和 Vendor ID 信息，使用下面的命令可以轻松获取到 ⚡ 12345678910111213141516171819202122# 查看 CPU 信息AS=$(sysctl -n machdep.cpu.brand_string|grep Apple|wc -l)# 如果是 Apple Silicon Macif [ $AS = &quot;1&quot; ];then vids=$(printf &quot;%x\\n&quot; $(ioreg -l|grep -i &quot;DisplayAttributes&quot;|grep -Eo &quot;\\&quot;LegacyManufacturerID\\&quot;=\\d*&quot;|awk -F'=' '{print $NF}')) pids=$(printf &quot;%x\\n&quot; $(ioreg -l|grep -i &quot;DisplayAttributes&quot;|grep -Eo &quot;\\&quot;ProductID\\&quot;=\\d*&quot;|awk -F'=' '{print $NF}')) names=$(ioreg -l|grep -i &quot;DisplayAttributes&quot;|grep -Eo &quot;\\&quot;ProductName\\&quot;=\\&quot;[^\\&quot;]*&quot;|awk -F'=&quot;' '{print $NF}') num=$(echo $vids|awk '{print NF}')else edids=$(ioreg -lw0|grep IODisplayEDID|grep -o &quot;&lt;.*&gt;&quot;|sed &quot;s/[&lt;&gt;]//g&quot;) vids=$(printf &quot;%x\\n&quot; $(ioreg -l | grep &quot;DisplayVendorID&quot;|awk '{print $NF}')) pids=$(printf &quot;%x\\n&quot; $(ioreg -l | grep &quot;DisplayProductID&quot;|awk '{print $NF}')) num=$(echo $vids|awk '{print NF}')for i in $(seq 1 $num);do vid=$(printf &quot;$vids\\n&quot;|sed -n &quot;${i}p&quot;) pid=$(printf &quot;$pids\\n&quot;|sed -n &quot;${i}p&quot;) if [ $AS == &quot;1&quot; ];then name=$(echo &quot;$names&quot;|sed -n ''$i'p') else name=$(printf &quot;$edids\\n&quot;|sed -n &quot;${i}p&quot;|grep -Eo &quot;fc00.*?0a&quot;|sed &quot;s/^fc00//g&quot;|xxd -r -p)done ❤ 感谢 Support to detect display info on Apple Silicon Mac","link":"/dl/get-the-display-product-id-and-vendor-id-on-apple-silicon-mac/"},{"title":"Apple Silicon Mac 安装和配置 iTerm2","text":"oh-my-zsh zsh-autosuggestions 自动补全命令插件 zsh-syntax-highlighting 高亮插件 Pure 提示符插件 Snazzy 配色方案 iTerm2&gt; 查看项目地址 🌟 推荐使用 Homebrew 安装 1brew install --cask iterm2 zsh&gt; Wikipedia macOS 10.15 及以上系统预装 zsh 🌟 推荐使用 Homebrew 安装 1brew install zsh oh-my-zsh&gt; 查看项目地址 安装1sh -c &quot;$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)&quot; 配置安装 oh-my-zsh 后，在 ~/.zshrc 中更改配置 自动补全 &amp; 高亮插件12brew install zsh-autosuggestionsbrew install zsh-syntax-highlighting 在 ~/.zshrc 中增加以下内容 12source /opt/homebrew/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zshsource /opt/homebrew/share/zsh-autosuggestions/zsh-autosuggestions.zsh 提示符插件 Pure&gt; 查看项目地址 安装指南看这里 查看相关 issue 使用 Homebrew 安装1brew install pure 在 ~/.zshrc 中增加以下内容 123fpath+=&quot;/opt/homebrew/share/zsh/site-functions&quot;autoload -U promptinit; promptinitprompt pure 使用 NPM 安装1npm install --global pure-prompt 在 ~/.zshrc 中增加以下内容 123fpath+=&quot;$HOME/.nvm/versions/node/&lt;NODE_VERSION&gt;/lib/node_modules/pure-prompt/functions&quot;autoload -U promptinit; promptinitprompt pure 主题颜色 Snazzy&gt; 查看项目地址 下载 iterm2-snazzy 下的 Snazzy.itermcolors 配置文件，双击安装 沉浸式标题栏找到 Appearance &gt; General &gt; Theme 选择 Minimal 附录：NVM 安装及配置1brew install nvm 在 ~/.zshrc 中增加以下内容 1234# NVMexport NVM_DIR=&quot;$HOME/.nvm&quot;[ -s &quot;/opt/homebrew/opt/nvm/nvm.sh&quot; ] &amp;&amp; . &quot;/opt/homebrew/opt/nvm/nvm.sh&quot; # This loads nvm[ -s &quot;/opt/homebrew/opt/nvm/etc/bash_completion.d/nvm&quot; ] &amp;&amp; . &quot;/opt/homebrew/opt/nvm/etc/bash_completion.d/nvm&quot; # This loads nvm bash_completion 参考 Settings to emojify and prettify your terminal (iTerm2 &amp; ZSH) Beautify your iTerm2 and prompt","link":"/dl/iterm2-installation-and-configuration-on-apple-silicon-mac/"},{"title":"macOS 线刷 MIUI","text":"由于 MIUI 没有提供 macOS 版本的线刷工具，但是 macOS 本来就支持运行 sh 脚本，所以线刷更加方便 🤖 准备 ADB 线刷包 开始手机进入 fastboot 模式1&gt; adb reboot fastboot 解压线刷包进入线刷包目录，执行下面的命令刷入 1234# 查看设备名&gt; fastboot devices&gt; cd ...&gt; sh {刷机脚本} -s {设备名} PS:几种刷机脚本的选择 💻 flash_all.sh 擦除全部数据 flash_all_except_storage.sh 擦除全部数据并保留存储数据 flash_all_lock.sh 擦除全部数据并 lock 等待刷入即可 ⌛️ 1234......Finished. Total time: 4.303sRebooting OKAY [ 0.000s]Finished. Total time: 0.000s 直到看到以上信息，即代表刷入成功 🎉","link":"/dl/macos-flash-miui/"},{"title":"回看 Apple Retina 屏幕标准","text":"💡 每英寸像素（Pixels Per Inch，缩写：PPI），又被称为像素密度 💡 英寸（inch，缩写为in或″），亦作“吋”或“英吋”，是英制及美制中的长度单位。1英寸等于 1⁄12 英尺，亦等于 1⁄36 码。按照现行国际码的定义，1 英寸严格等于 25.4 毫米。 iPhone 名称 尺寸 (inch) 分辨率 PPI 备注 iPhone 4 / 4S 3.5 960 * 640 326 LCD iPhone 5 / 5S / 5C / SE (1st generation) 4.0 1136 * 640 326 LCD iPhone 6 / 6S / 7 / 8 / SE (2nd generation) 4.7 1334 * 750 326 LCD iPhone 6 Plus / 6S Plus / 7 Plus / 8 Plus 5.5 1920 * 1080 401 LCD iPhone XR / 11 6.1 1792 * 828 326 LCD iPhone X / XS / 11 Pro 5.8 2436 * 1125 458 OLED iPhone 12 / 12 Pro / 13 / 13 Pro 6.1 2532 * 1170 460 OLED iPhone XS Max / 11 Pro Max 6.5 2688 * 1242 458 OLED iPhone / 12 Pro Max / 13 Pro Max 6.7 2778 * 1284 458 OLED iPhone 12 mini / 13 mini 5.4 2340 * 1080 476 OLED iPad (待补全) 名称 尺寸 分辨率 PPI 备注 … … … … … Mac (待补全) 名称 尺寸 分辨率 PPI 备注 iMac 21.5 4K 21.5 4096 * 2304 217 10bit 500 nit P3 iMac 27 5K 27 5120 * 2880 217 10bit 500 nit P3 原彩显示 可选 Nano-texture 纳米纹理玻璃面板 iMac 24 4.5K (M1) 24 4480 * 2520 218 10bit 500 nit P3 原彩显示 … … … … … 显示器 名称 尺寸 分辨率 PPI 备注 LG UltraFine 4K (22MD4KA) 21.5 4096 * 2304 219 8bit 500 nit P3 LG UltraFine 4K (24MD4KL) 23.7 3840 * 2160 186 10bit 500 nit P3 LG UltraFine 5K (27MD5KL) 27 5120 * 2880 218 10bit 500 nit P3 Pro Display XDR 6K 32 6016 * 3384 218 10bit SDR 500 nit 1000 nit (全屏幕) 1600 nit (最高) 1,000,000:1 P3 原彩显示 可选 Nano-texture 纳米纹理玻璃面板 * 数据来源于苹果官网和维基百科","link":"/dl/review-apple-retina-screen-standard/"}],"tags":[{"name":"Apple Silicon","slug":"Apple-Silicon","link":"/tags/Apple-Silicon/"},{"name":"macOS","slug":"macOS","link":"/tags/macOS/"},{"name":"Mac","slug":"Mac","link":"/tags/Mac/"},{"name":"Github","slug":"Github","link":"/tags/Github/"},{"name":"TortoiseSVN","slug":"TortoiseSVN","link":"/tags/TortoiseSVN/"},{"name":"Windows","slug":"Windows","link":"/tags/Windows/"},{"name":"Node.js","slug":"Node-js","link":"/tags/Node-js/"},{"name":"Terminal","slug":"Terminal","link":"/tags/Terminal/"},{"name":"MIUI","slug":"MIUI","link":"/tags/MIUI/"},{"name":"Apple","slug":"Apple","link":"/tags/Apple/"}],"categories":[{"name":"数字生活","slug":"数字生活","link":"/categories/%E6%95%B0%E5%AD%97%E7%94%9F%E6%B4%BB/"},{"name":"开发","slug":"开发","link":"/categories/%E5%BC%80%E5%8F%91/"}]}